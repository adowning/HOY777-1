var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};
var __markAsModule = (target) => __defProp(target, "__esModule", { value: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __reExport = (target, module2, copyDefault, desc) => {
  if (module2 && typeof module2 === "object" || typeof module2 === "function") {
    for (let key of __getOwnPropNames(module2))
      if (!__hasOwnProp.call(target, key) && (copyDefault || key !== "default"))
        __defProp(target, key, { get: () => module2[key], enumerable: !(desc = __getOwnPropDesc(module2, key)) || desc.enumerable });
  }
  return target;
};
var __toESM = (module2, isNodeMode) => {
  return __reExport(__markAsModule(__defProp(module2 != null ? __create(__getProtoOf(module2)) : {}, "default", !isNodeMode && module2 && module2.__esModule ? { get: () => module2.default, enumerable: true } : { value: module2, enumerable: true })), module2);
};
var __toCommonJS = /* @__PURE__ */ ((cache) => {
  return (module2, temp) => {
    return cache && cache.get(module2) || (temp = __reExport(__markAsModule({}), module2, 1), cache && cache.set(module2, temp), temp);
  };
})(typeof WeakMap !== "undefined" ? /* @__PURE__ */ new WeakMap() : 0);

// index.ts
var vite_plugin_cache_resource_exports = {};
__export(vite_plugin_cache_resource_exports, {
  cacheResource: () => cacheResource
});
var import_path = __toESM(require("path"));
var import_fs_extra = __toESM(require("fs-extra"));
var import_node_fetch = __toESM(require("node-fetch"));
var import_sanitize_filename = __toESM(require("sanitize-filename"));
var cacheResource = (userOptions = {}) => {
  const defaultOptions = {
    cacheDir: import_path.default.join(process.cwd(), "tmp")
  };
  const options = __spreadValues(__spreadValues({}, defaultOptions), userOptions);
  return {
    name: "vite-plugin-cache-resource",
    async resolveId(id) {
      const schema = [
        { prefix: "cache:", loader: "?raw" },
        { prefix: "cache+json:", loader: "?json" }
      ].find((schema2) => id.startsWith(schema2.prefix));
      if (!schema)
        return;
      const url = id.replace(schema.prefix, "");
      try {
        const cacheFilename = (0, import_sanitize_filename.default)(url, { replacement: "-" });
        if (!options.cacheDir) {
          throw new Error(`invalid cacheDir ${options.cacheDir}`);
        }
        const cacheFilePath = import_path.default.join(options.cacheDir, cacheFilename);
        const filepathWithLoader = `${cacheFilePath}${schema.loader}`;
        if (await import_fs_extra.default.pathExists(cacheFilePath)) {
          return filepathWithLoader;
        }
        console.log(`fetching ${url}`);
        const res = await (0, import_node_fetch.default)(url);
        const data = await res.text();
        await import_fs_extra.default.ensureFile(cacheFilePath);
        await import_fs_extra.default.writeFile(cacheFilePath, data, "utf-8");
        return filepathWithLoader;
      } catch (e) {
        console.error(e);
      }
    },
    transform(code, id) {
      if (id.endsWith("?json")) {
        return `export default ${code}`;
      }
    }
  };
};
module.exports = __toCommonJS(vite_plugin_cache_resource_exports);
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  cacheResource
});
