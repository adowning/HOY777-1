var __defProp = Object.defineProperty;
var __getOwnPropSymbols = Object.getOwnPropertySymbols;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __propIsEnum = Object.prototype.propertyIsEnumerable;
var __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;
var __spreadValues = (a, b) => {
  for (var prop in b || (b = {}))
    if (__hasOwnProp.call(b, prop))
      __defNormalProp(a, prop, b[prop]);
  if (__getOwnPropSymbols)
    for (var prop of __getOwnPropSymbols(b)) {
      if (__propIsEnum.call(b, prop))
        __defNormalProp(a, prop, b[prop]);
    }
  return a;
};

// index.ts
import path from "path";
import fs from "fs-extra";
import fetch from "node-fetch";
import sanitize from "sanitize-filename";
var cacheResource = (userOptions = {}) => {
  const defaultOptions = {
    cacheDir: path.join(process.cwd(), "tmp")
  };
  const options = __spreadValues(__spreadValues({}, defaultOptions), userOptions);
  return {
    name: "vite-plugin-cache-resource",
    async resolveId(id) {
      const schema = [
        { prefix: "cache:", loader: "?raw" },
        { prefix: "cache+json:", loader: "?json" }
      ].find((schema2) => id.startsWith(schema2.prefix));
      if (!schema)
        return;
      const url = id.replace(schema.prefix, "");
      try {
        const cacheFilename = sanitize(url, { replacement: "-" });
        if (!options.cacheDir) {
          throw new Error(`invalid cacheDir ${options.cacheDir}`);
        }
        const cacheFilePath = path.join(options.cacheDir, cacheFilename);
        const filepathWithLoader = `${cacheFilePath}${schema.loader}`;
        if (await fs.pathExists(cacheFilePath)) {
          return filepathWithLoader;
        }
        console.log(`fetching ${url}`);
        const res = await fetch(url);
        const data = await res.text();
        await fs.ensureFile(cacheFilePath);
        await fs.writeFile(cacheFilePath, data, "utf-8");
        return filepathWithLoader;
      } catch (e) {
        console.error(e);
      }
    },
    transform(code, id) {
      if (id.endsWith("?json")) {
        return `export default ${code}`;
      }
    }
  };
};
export {
  cacheResource
};
