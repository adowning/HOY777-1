// src/debug-log/index.ts
import build from "pino-abstract-transport";

// src/debug-log/handler.ts
import { getColorEnabled as getColorEnabled3 } from "hono/utils/color";
import { pino } from "pino";

// src/debug-log/formatter.ts
import { getColorEnabled as getColorEnabled2 } from "hono/utils/color";

// src/debug-log/utils.ts
import { getColorEnabled } from "hono/utils/color";
var ANSI = {
  Reset: "\x1B[0m",
  Bright: "\x1B[1m",
  FgWhite: "\x1B[37m",
  FgRed: "\x1B[31m",
  FgGreen: "\x1B[32m",
  FgYellow: "\x1B[33m",
  FgMagenta: "\x1B[35m",
  FgCyan: "\x1B[36m",
  FgGray: "\x1B[90m",
  BgGray: "\x1B[100m"
};
function isUnixTime(time) {
  const UnixTimeMax = 4102444800;
  return time <= UnixTimeMax;
}
function addStatusColor(text, status, opts) {
  const colorEnabled = opts?.colorEnabled ?? getColorEnabled();
  if (colorEnabled) {
    const statusCategory = status / 100 | 0;
    if (statusCategory === 5) {
      return `${ANSI.FgRed}${text}${ANSI.Reset}`;
    }
    if (statusCategory === 4) {
      return `${ANSI.FgYellow}${text}${ANSI.Reset}`;
    }
    if (statusCategory === 3) {
      return `${ANSI.FgCyan}${text}${ANSI.Reset}`;
    }
    if (statusCategory === 2) {
      return `${ANSI.FgGreen}${text}${ANSI.Reset}`;
    }
  }
  return text;
}

// src/debug-log/formatter.ts
var defaultLevelFormatter = (label, level, opts) => {
  const { colorEnabled = getColorEnabled2() } = opts ?? {};
  if (colorEnabled) {
    if (level === 10) return `${ANSI.FgGray}${label}${ANSI.Reset}`;
    if (level === 20) return `${ANSI.FgCyan}${label}${ANSI.Reset}`;
    if (level === 30) return `${ANSI.FgGreen}${label}${ANSI.Reset}`;
    if (level === 40) return `${ANSI.FgYellow}${label}${ANSI.Reset}`;
    if (level === 50) return `${ANSI.FgRed}${label}${ANSI.Reset}`;
    if (level === 60) return `${ANSI.FgMagenta}${label}${ANSI.Reset}`;
  }
  return label;
};
var defaultTimeFormatter = (time) => {
  if (!time) {
    return "";
  }
  if (typeof time === "string") {
    return time;
  }
  if (isUnixTime(time)) {
    const unixTime = new Date(time * 1e3);
    return unixTime.toISOString().slice(11, 19);
  }
  const date = new Date(time);
  const ms = date.getMilliseconds().toString().padEnd(3, "0");
  return `${date.toISOString().slice(11, 19)}.${ms}`;
};
var defaultBindingsFormat = (bindings, opts) => {
  const { colorEnabled = getColorEnabled2() } = opts ?? {};
  const bindingsStr = JSON.stringify(bindings);
  if (colorEnabled) {
    return `${ANSI.FgGray}${bindingsStr}${ANSI.Reset}`;
  }
  return bindingsStr;
};

// src/debug-log/handler.ts
function createHandler(opts) {
  const colorEnabled = opts?.colorEnabled ?? getColorEnabled3();
  const messageKey = opts?.messageKey ?? "msg";
  const requestKey = opts?.requestKey ?? "req";
  const responseKey = opts?.responseKey ?? "res";
  const levelLabelMap = opts?.levelLabelMap ?? pino.levels.labels;
  const levelMaxLength = Object.values(levelLabelMap).reduce(
    (max, label) => Math.max(max, label.length),
    0
  );
  const normalLogFormat = opts?.normalLogFormat ?? "[{time}] {levelLabel} - {msg}";
  const httpLogFormat = opts?.httpLogFormat ?? "[{time}] {reqId} {req.method} {req.url} {res.status} ({responseTime}ms) - {msg} {bindings}";
  const timeFormatter = opts?.timeFormatter ?? defaultTimeFormatter;
  const bindingsFormatter = opts?.bindingsFormatter ?? defaultBindingsFormat;
  const levelFormatter = opts?.levelFormatter ?? defaultLevelFormatter;
  const printer = opts?.printer ?? console.log;
  const handler = (obj) => {
    const {
      level,
      time,
      [messageKey]: msg,
      reqId,
      responseTime,
      [requestKey]: req,
      [responseKey]: res,
      ...rest
    } = obj ?? {};
    const timeStr = timeFormatter(time);
    const levelLabel = (levelLabelMap[level] ?? "").toUpperCase().padEnd(levelMaxLength);
    const status = addStatusColor(res?.status?.toString(), res?.status, {
      colorEnabled
    });
    const textMap = {
      time: timeStr,
      level,
      levelLabel: levelFormatter(levelLabel, level, {
        colorEnabled
      }),
      msg,
      reqId: colorEnabled ? `${ANSI.BgGray}${reqId}${ANSI.Reset}` : reqId,
      responseTime,
      "req.method": req?.method,
      "req.url": req?.url,
      "res.status": status,
      // Format and colorize context/bindings if present
      bindings: bindingsFormatter(rest, {
        colorEnabled
      })
    };
    const isHttpLog = !!res;
    const logFormat = isHttpLog ? httpLogFormat : normalLogFormat;
    const output = Object.entries(textMap).reduce(
      (acc, [key, value]) => acc.replace(`{${key}}`, value),
      logFormat
    );
    printer(output);
  };
  return handler;
}

// src/debug-log/index.ts
async function debug_log_default(opts) {
  const handler = opts?._handler ?? createHandler(opts);
  return build(async (source) => {
    source.on("data", (line) => {
      handler(line);
    });
  });
}
export {
  createHandler,
  debug_log_default as default
};
