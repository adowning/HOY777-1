"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.ts
var index_exports = {};
__export(index_exports, {
  PinoLogger: () => PinoLogger,
  getLogger: () => getLogger,
  httpCfgSym: () => httpCfgSym,
  logger: () => logger,
  pinoLogger: () => pinoLogger
});
module.exports = __toCommonJS(index_exports);

// src/logger.ts
var import_defu = require("defu");
var httpCfgSym = Symbol("httpCfgSym");
var PinoLogger = class {
  /**
   * Internal pino logger instance
   *
   * If you want to interact with the internal pino logger,
   * you can use it (not recommended)
   */
  _rootLogger;
  /**
   * Internal child pino logger instance, recreated after each update bindings.
   *
   * If you want to interact with the internal pino logger,
   * you can use it (not recommended)
   */
  _logger;
  // in cloudflare worker, pino logger bindings maybe not available
  // use custom internal bindings
  #bindings = {};
  [httpCfgSym] = {};
  constructor(rootLogger, childOptions) {
    this._rootLogger = rootLogger.child({}, childOptions);
    this._logger = rootLogger;
    this.#bindings = rootLogger.bindings?.();
  }
  /**
   * Get bindings from http log context
   */
  bindings() {
    return this.#bindings;
  }
  /**
   * Clear bindings from http log context
   */
  clearBindings() {
    this.#bindings = {};
    this._logger = this._rootLogger.child(this.#bindings);
    return this;
  }
  /**
   * Assign bindings to http log context
   */
  assign(bindings, opts) {
    this.#bindings = opts?.deep ? (0, import_defu.defu)(bindings, this.#bindings) : { ...this.#bindings, ...bindings };
    this._logger = this._rootLogger.child(this.#bindings);
    return this;
  }
  /**
   * Override response log message
   */
  setResMessage(message) {
    this[httpCfgSym].resMessage = message;
    return this;
  }
  /**
   * Override response log level
   */
  setResLevel(level) {
    this[httpCfgSym].resLevel = level;
    return this;
  }
};
PinoLogger.prototype.trace = function(...args) {
  this._logger.trace(...args);
};
PinoLogger.prototype.debug = function(...args) {
  this._logger.debug(...args);
};
PinoLogger.prototype.info = function(...args) {
  this._logger.info(...args);
};
PinoLogger.prototype.warn = function(...args) {
  this._logger.warn(...args);
};
PinoLogger.prototype.error = function(...args) {
  this._logger.error(...args);
};
PinoLogger.prototype.fatal = function(...args) {
  this._logger.fatal(...args);
};

// src/middleware.ts
var import_defu2 = require("defu");
var import_adapter = require("hono/adapter");
var import_pino = require("pino");

// src/utils.ts
function getLogger(c) {
  return c.get("logger");
}
function isPino(value) {
  return typeof value === "object" && value !== null && // issue: https://github.com/pinojs/pino/issues/2079
  // pino.symbols.messageKeySym in value
  "info" in value && typeof value.info === "function" && "child" in value && typeof value.child === "function";
}
function isPinoTransport(value) {
  return typeof value === "object" && value !== null && "write" in value && typeof value.write === "function";
}
function createConsoleDestinationStream() {
  return {
    write(msg) {
      console.log(msg);
    }
  };
}

// src/middleware.ts
var pinoLogger = (opts) => {
  const contextKey = opts?.contextKey ?? "logger";
  const nodeRuntime = opts?.nodeRuntime === "auto" || opts?.nodeRuntime === void 0 ? ["node", "bun"].includes((0, import_adapter.getRuntimeKey)()) : opts?.nodeRuntime;
  let rootLogger = createStaticRootLogger(opts?.pino, nodeRuntime);
  return async (c, next) => {
    const [dynamicRootLogger, loggerChildOptions] = parseDynamicRootLogger(
      opts?.pino,
      c
    );
    rootLogger ??= dynamicRootLogger ?? getDefaultRootLogger();
    const logger2 = new PinoLogger(rootLogger, loggerChildOptions);
    c.set(contextKey, logger2);
    if (opts?.http === false) {
      await next();
      return;
    }
    let bindings = opts?.http?.onReqBindings?.(c) ?? {
      req: {
        url: c.req.path,
        method: c.req.method,
        headers: c.req.header()
      }
    };
    logger2.assign(bindings);
    const referRequestIdKey = opts?.http?.referRequestIdKey ?? "requestId";
    if (referRequestIdKey in c.var) {
      bindings.reqId = c.var[referRequestIdKey];
    } else if (opts?.http?.reqId !== false) {
      bindings.reqId = opts?.http?.reqId?.() ?? defaultReqIdGenerator();
    }
    if (opts?.http?.onReqMessage) {
      const level = opts.http.onReqLevel?.(c) ?? "info";
      const msg = await opts.http.onReqMessage(c);
      logger2[level](bindings, msg);
    }
    if (opts?.http?.responseTime ?? true) {
      const startTime = performance.now();
      await next();
      const endTime = performance.now();
      const responseTime = Math.round(endTime - startTime);
      bindings.responseTime = responseTime;
    } else {
      await next();
    }
    if (opts?.http?.onResMessage !== false) {
      const onResBindings = opts?.http?.onResBindings?.(c) ?? {
        res: {
          status: c.res.status,
          headers: c.res.headers
        }
      };
      bindings = (0, import_defu2.defu)(bindings, onResBindings);
      const level = logger2[httpCfgSym].resLevel ?? opts?.http?.onResLevel?.(c) ?? (c.error ? "error" : "info");
      const msg = logger2[httpCfgSym].resMessage ?? (opts?.http?.onResMessage ? await opts?.http?.onResMessage(c) : void 0) ?? (c.error ? c.error.message : "Request completed");
      logger2[level](bindings, msg);
    }
  };
};
var logger = pinoLogger;
var _defaultReqId = 0;
var defaultReqIdGenerator = () => {
  _defaultReqId += 1;
  return _defaultReqId;
};
var createStaticRootLogger = (opt, nodeRuntime) => {
  if (typeof opt === "function") return null;
  if (isPino(opt)) return opt;
  if (nodeRuntime) return (0, import_pino.pino)(opt);
  if (isPinoTransport(opt)) return (0, import_pino.pino)(opt);
  return (0, import_pino.pino)(opt ?? {}, createConsoleDestinationStream());
};
var parseDynamicRootLogger = (opt, c) => {
  if (opt === void 0) {
    const { LOG_LEVEL } = (0, import_adapter.env)(c);
    return [
      void 0,
      {
        level: LOG_LEVEL ?? "info"
      }
    ];
  }
  if (typeof opt !== "function") return [void 0, void 0];
  const v = opt(c);
  if (isPino(v)) return [v, void 0];
  return [void 0, v];
};
var _defaultRootLogger;
var getDefaultRootLogger = () => {
  _defaultRootLogger ??= (0, import_pino.pino)();
  return _defaultRootLogger;
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PinoLogger,
  getLogger,
  httpCfgSym,
  logger,
  pinoLogger
});
//! in cloudflare worker, pino logger bindings maybe not available
