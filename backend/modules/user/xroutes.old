import { OpenAPIHono, createRoute, z } from '@hono/zod-openapi';
import * as controller from './user.controller';
import * as HttpStatusCodes from "stoker/http-status-codes";
import { notFoundSchema } from "../../lib/constants";

import { jsonContent, jsonContentRequired } from "stoker/openapi/helpers";
import { createErrorSchema, IdParamsSchema } from "stoker/openapi/schemas";

import { insertUsersSchema, patchUsersSchema, selectUsersSchema, BalanceSchema, CurrencySchema } from "../../db/schemelibsql";

const ErrorSchema = z.object({
  error: z.string(),
}).openapi('Error');

// --- Route Definitions ---
const tags = ["User"];

// const listUserRoute = createRoute({
  const listUser = createRoute({
  path: "/users",
  method: "get",
  tags,
  responses: {
    [HttpStatusCodes.OK]: jsonContent(
      z.array(selectUsersSchema),
      "The list of tasks",
    ),
  },
});

// const createUserRoutex = createRoute({
//   method: 'post',
//   path: '/',
//   tags: ['User'],
//   summary: 'Create a new user',
//   request: {
//     body: {
//       content: {
//         'application/json': {
//           schema: UserSchema.omit({ id: true, createdAt: true }).openapi('CreateUserInput'),
//         },
//       },
//     },
//   },
//   responses: {
//     201: { description: 'Returns the created user', content: { 'application/json': { schema: UserSchema } } },
//     400: { description: "Invalid input data", content: { "application/json": { schema: ErrorSchema } } },
//     500: { description: "Internal Server Error", content: { "application/json": { schema: ErrorSchema } } },
//   },
// });

 const createUser = createRoute({
  path: "/users",
  method: "post",
  request: {
    body: jsonContentRequired(
      insertUsersSchema,
      "The task to create",
    ),
  },
  tags,
  responses: {
    [HttpStatusCodes.OK]: jsonContent(
      selectUsersSchema,
      "The created task",
    ),
    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
      createErrorSchema(insertUsersSchema),
      "The validation error(s)",
    ),
  },
});

// const getUserByIdRoute = createRoute({
//   method: 'get',
//   path: '/{id}',
//   tags: ['User'],
//   summary: 'Get a user by ID',
//   request: { params: z.object({ id: z.string() }) },
//   responses: {
//     200: { description: 'Returns the user', content: { 'application/json': { schema: UserSchema } } },
//     404: { description: "User not found", content: { "application/json": { schema: ErrorSchema } } },
//     500: { description: "Internal Server Error", content: { "application/json": { schema: ErrorSchema } } },
//   },
// });

 const getOneUser = createRoute({
  path: "/users/{id}",
  method: "get",
  request: {
    params: IdParamsSchema,
  },
  tags,
  responses: {
    [HttpStatusCodes.OK]: jsonContent(
      selectUsersSchema,
      "The requested task",
    ),
    [HttpStatusCodes.NOT_FOUND]: jsonContent(
      notFoundSchema,
      "Task not found",
    ),
    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
      createErrorSchema(IdParamsSchema),
      "Invalid id error",
    ),
  },
});

// const updateUserRoute = createRoute({
//   method: 'patch',
//   path: '/{id}',
//   tags: ['User'],
//   summary: 'Update a user by ID',
//   request: {
//     params: z.object({ id: z.string() }),
//     body: { content: { 'application/json': { schema: UserSchema.omit({ id: true, createdAt: true }).partial().openapi('UpdateUserInput') } } },
//   },
//   responses: {
//     200: { description: 'Returns the updated user', content: { 'application/json': { schema: UserSchema } } },
//     400: { description: "Invalid input data or ID format", content: { "application/json": { schema: ErrorSchema } } },
//     404: { description: "User not found", content: { "application/json": { schema: ErrorSchema } } },
//     500: { description: "Internal Server Error", content: { "application/json": { schema: ErrorSchema } } },
//   },
// });

 const updateUser = createRoute({
  path: "/users/{id}",
  method: "patch",
  request: {
    params: IdParamsSchema,
    body: jsonContentRequired(
      patchUsersSchema,
      "The task updates",
    ),
  },
  tags,
  responses: {
    [HttpStatusCodes.OK]: jsonContent(
      selectUsersSchema,
      "The updated task",
    ),
    [HttpStatusCodes.NOT_FOUND]: jsonContent(
      notFoundSchema,
      "Task not found",
    ),
    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
      createErrorSchema(patchUsersSchema)
        .or(createErrorSchema(IdParamsSchema)),
      "The validation error(s)",
    ),
  },
});

// const deleteUserRoute = createRoute({
//   method: 'delete',
//   path: '/{id}',
//   tags: ['User'],
//   summary: 'Delete a user by ID',
//   request: { params: z.object({ id: z.string() }) },
//   responses: {
//     200: { description: 'User deleted successfully', content: { 'application/json': { schema: z.object({ id: z.number() }).openapi('DeleteUserResponse') } } },
//     400: { description: "Invalid ID format", content: { 'application/json': { schema: ErrorSchema } } },
//     404: { description: "User not found", content: { "application/json": { schema: ErrorSchema } } },
//     500: { description: "Internal Server Error", content: { "application/json": { schema: ErrorSchema } } },
//   },
// });

 const removeUser = createRoute({
  path: "/users/{id}",
  method: "delete",
  request: {
    params: IdParamsSchema,
  },
  tags,
  responses: {
    [HttpStatusCodes.NO_CONTENT]: {
      description: "Task deleted",
    },
    [HttpStatusCodes.NOT_FOUND]: jsonContent(
      notFoundSchema,
      "Task not found",
    ),
    [HttpStatusCodes.UNPROCESSABLE_ENTITY]: jsonContent(
      createErrorSchema(IdParamsSchema),
      "Invalid id error",
    ),
  },
});

// Routes from Pinia Store & HAR files
const checkUserRoute = createRoute({
    method: 'get',
    path: '/{id}/check',
    tags: ['User'],
    summary: 'Check if a user exists',
    request: { params: z.object({ id: z.string() }) },
    responses: {
        200: { description: 'User status', content: { 'application/json': { schema: z.object({ userCheck: z.boolean() }).openapi('UserCheckResponse') } } },
        404: { description: 'User not found', content: { 'application/json': { schema: ErrorSchema } } },
    },
});

const getBalanceRoute = createRoute({
    method: 'get',
    path: '/{id}/balance',
    tags: ['User'],
    summary: "Get user's balance",
    request: { params: z.object({ id: z.string() }) },
    responses: {
        200: { description: 'User balance', content: { 'application/json': { schema: z.array(BalanceSchema).openapi('BalanceList') } } },
    },
});

const setCurrencyRoute = createRoute({
    method: 'post',
    path: '/{id}/currency',
    tags: ['User'],
    summary: "Set user's currency",
    request: { 
        params: z.object({ id: z.string() }),
        body: { content: { 'application/json': { schema: z.object({ currency: z.string() }).openapi('SetCurrencyInput') } } }
    },
    responses: {
        200: { description: 'Currency set', content: { 'application/json': { schema: CurrencySchema } } },
        400: { description: 'Invalid currency', content: { 'application/json': { schema: ErrorSchema } } },
    },
});

const verifyEmailRoute = createRoute({
    method: 'post',
    path: '/{id}/verify-email',
    tags: ['User'],
    summary: 'Send email verification',
    request: { params: z.object({ id: z.string() }) },
    responses: {
        200: { description: 'Verification sent', content: { 'application/json': { schema: z.object({ status: z.string(), time: z.number() }).openapi('VerifyEmailResponse') } } },
    },
});

const getInfoRoute = createRoute({
    method: 'get',
    path: '/{id}/info',
    tags: ['User'],
    summary: 'Get user info',
    request: { params: z.object({ id: z.string() }) },
    responses: {
        200: { description: 'User info', content: { 'application/json': { schema: UserSchema } } },
        404: { description: 'User not found', content: { 'application/json': { schema: ErrorSchema } } },
    },
});

const getVipInfoRoute = createRoute({
    method: 'get',
    path: '/{id}/vipinfo',
    tags: ['User'],
    summary: 'Get user VIP info',
    request: { params: z.object({ id: z.string() }) },
    responses: {
        200: { description: 'VIP info', content: { 'application/json': { schema: z.object({ vipLevel: z.number().nullable() }).openapi('VipInfoResponse') } } },
    },
});

const userRoutes = new OpenAPIHono();

// Basic CRUD
userRoutes.openapi(listUser, controller.listUser);
userRoutes.openapi(createUser, controller.createUser);
userRoutes.openapi(getOneUser, controller.getUserById);
userRoutes.openapi(updateUser, controller.updateUser);
userRoutes.openapi(removeUser, controller.deleteUser);

// From Pinia Store & HAR files
userRoutes.openapi(checkUserRoute, controller.checkUser);
userRoutes.openapi(getBalanceRoute, controller.getBalance);
userRoutes.openapi(setCurrencyRoute, controller.setCurrency);
userRoutes.openapi(verifyEmailRoute, controller.verifyEmail);
userRoutes.openapi(getInfoRoute, controller.getInfo);
userRoutes.openapi(getVipInfoRoute, controller.getVipInfo);

export default userRoutes;
