// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetData, GetResponses, GetTestData, GetTestResponses, PostTestSignupData, PostTestSignupResponses, GetTestLoginData, GetTestLoginResponses, PostTestLoginData, PostTestLoginResponses, PostLoginData, PostLoginResponses, PostSignupData, PostSignupResponses, PostLogoutData, PostLogoutResponses, GetMeData, GetMeResponses, GetUsersData, GetUsersResponses, PostUsersData, PostUsersResponses, PostUsersErrors, PostEnterGameData, PostEnterGameResponses, PostGamesData, PostGamesResponses, PostSetupGameData, PostSetupGameResponses, GetGamehistoryData, GetGamehistoryResponses, GetSpinpageData, GetSpinpageResponses, PostSpinData, PostSpinResponses, GetFavoriteGameData, GetFavoriteGameResponses, DeleteUsersByIdData, DeleteUsersByIdResponses, DeleteUsersByIdErrors, GetUsersByIdData, GetUsersByIdResponses, GetUsersByIdErrors, PatchUsersByIdData, PatchUsersByIdResponses, PatchUsersByIdErrors, GetUsersByIdCheckData, GetUsersByIdCheckResponses, GetUsersByIdCheckErrors, GetUsersByIdBalanceData, GetUsersByIdBalanceResponses, PostUsersByIdCurrencyData, PostUsersByIdCurrencyResponses, PostUsersByIdCurrencyErrors, PostUsersByIdVerifyEmailData, PostUsersByIdVerifyEmailResponses, GetUsersByIdInfoData, GetUsersByIdInfoResponses, GetUsersByIdInfoErrors, GetUsersByIdVipinfoData, GetUsersByIdVipinfoResponses, GetUserAmountData, GetUserAmountResponses, PostUserChangeData, PostUserChangeResponses, PostUserEmailData, PostUserEmailResponses, PostUserPasswordData, PostUserPasswordResponses, PostUserSuspendData, PostUserSuspendResponses, GetUserBalanceListData, GetUserBalanceListResponses, GetGamesCategoriesData, GetGamesCategoriesResponses, GetSearchData, GetSearchResponses, GetBigwinData, GetBigwinResponses, GetVipinfoData, GetVipinfoResponses, GetViplevelsData, GetViplevelsResponses, GetViptasksData, GetViptasksResponses, PostViplevelAwardData, PostViplevelAwardResponses, PostViprebateAwardData, PostViprebateAwardResponses, GetViprebatehistoryData, GetViprebatehistoryResponses, GetViplevelawardhistoryData, GetViplevelawardhistoryResponses, GetViptimeshistoryData, GetViptimeshistoryResponses, PostVipsigninAwardData, PostVipsigninAwardResponses, GetVipSigninawardListData, GetVipSigninawardListResponses, PostVipSigninawardReceiveData, PostVipSigninawardReceiveResponses, GetViplevelupListData, GetViplevelupListResponses, PostViplevelupReceiveData, PostViplevelupReceiveResponses, GetVipCycleawardListData, GetVipCycleawardListResponses, PostVipCycleawardReceiveData, PostVipCycleawardReceiveResponses, GetVipLevelawardListData, GetVipLevelawardListResponses, PostVipLevelawardReceiveData, PostVipLevelawardReceiveResponses, GetVipBetawardListData, GetVipBetawardListResponses, PostVipBetawardReceiveData, PostVipBetawardReceiveResponses, GetMonitoringData, GetMonitoringResponses, GetMonitoringEventsData, GetMonitoringEventsResponses } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

export const get = <ThrowOnError extends boolean = false>(options?: Options<GetData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetResponses, unknown, ThrowOnError>({
        url: '/',
        ...options
    });
};

export const getTest = <ThrowOnError extends boolean = false>(options?: Options<GetTestData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTestResponses, unknown, ThrowOnError>({
        url: '/test',
        ...options
    });
};

export const postTestSignup = <ThrowOnError extends boolean = false>(options?: Options<PostTestSignupData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTestSignupResponses, unknown, ThrowOnError>({
        url: '/test/signup',
        ...options
    });
};

export const getTestLogin = <ThrowOnError extends boolean = false>(options?: Options<GetTestLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetTestLoginResponses, unknown, ThrowOnError>({
        url: '/test/login',
        ...options
    });
};

export const postTestLogin = <ThrowOnError extends boolean = false>(options?: Options<PostTestLoginData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostTestLoginResponses, unknown, ThrowOnError>({
        url: '/test/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

export const postLogin = <ThrowOnError extends boolean = false>(options: Options<PostLoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostLoginResponses, unknown, ThrowOnError>({
        url: '/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postSignup = <ThrowOnError extends boolean = false>(options: Options<PostSignupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostSignupResponses, unknown, ThrowOnError>({
        url: '/signup',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout current user
 */
export const postLogout = <ThrowOnError extends boolean = false>(options?: Options<PostLogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostLogoutResponses, unknown, ThrowOnError>({
        url: '/logout',
        ...options
    });
};

/**
 * Get current user session
 */
export const getMe = <ThrowOnError extends boolean = false>(options?: Options<GetMeData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMeResponses, unknown, ThrowOnError>({
        url: '/me',
        ...options
    });
};

export const getUsers = <ThrowOnError extends boolean = false>(options?: Options<GetUsersData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUsersResponses, unknown, ThrowOnError>({
        url: '/users',
        ...options
    });
};

export const postUsers = <ThrowOnError extends boolean = false>(options: Options<PostUsersData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersResponses, PostUsersErrors, ThrowOnError>({
        url: '/users',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postEnterGame = <ThrowOnError extends boolean = false>(options?: Options<PostEnterGameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostEnterGameResponses, unknown, ThrowOnError>({
        url: '/enter/game',
        ...options
    });
};

export const postGames = <ThrowOnError extends boolean = false>(options?: Options<PostGamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostGamesResponses, unknown, ThrowOnError>({
        url: '/games',
        ...options
    });
};

export const postSetupGame = <ThrowOnError extends boolean = false>(options?: Options<PostSetupGameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSetupGameResponses, unknown, ThrowOnError>({
        url: '/setup/game',
        ...options
    });
};

export const getGamehistory = <ThrowOnError extends boolean = false>(options?: Options<GetGamehistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGamehistoryResponses, unknown, ThrowOnError>({
        url: '/gamehistory',
        ...options
    });
};

export const getSpinpage = <ThrowOnError extends boolean = false>(options?: Options<GetSpinpageData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSpinpageResponses, unknown, ThrowOnError>({
        url: '/spinpage',
        ...options
    });
};

export const postSpin = <ThrowOnError extends boolean = false>(options?: Options<PostSpinData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostSpinResponses, unknown, ThrowOnError>({
        url: '/spin',
        ...options
    });
};

export const getFavoriteGame = <ThrowOnError extends boolean = false>(options?: Options<GetFavoriteGameData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFavoriteGameResponses, unknown, ThrowOnError>({
        url: '/favorite/game',
        ...options
    });
};

export const deleteUsersById = <ThrowOnError extends boolean = false>(options: Options<DeleteUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteUsersByIdResponses, DeleteUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

export const getUsersById = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdResponses, GetUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options
    });
};

export const patchUsersById = <ThrowOnError extends boolean = false>(options: Options<PatchUsersByIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<PatchUsersByIdResponses, PatchUsersByIdErrors, ThrowOnError>({
        url: '/users/{id}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Check if a user exists
 */
export const getUsersByIdCheck = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdCheckData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdCheckResponses, GetUsersByIdCheckErrors, ThrowOnError>({
        url: '/users/{id}/check',
        ...options
    });
};

/**
 * Get user's balance
 */
export const getUsersByIdBalance = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdBalanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdBalanceResponses, unknown, ThrowOnError>({
        url: '/users/{id}/balance',
        ...options
    });
};

/**
 * Set user's currency
 */
export const postUsersByIdCurrency = <ThrowOnError extends boolean = false>(options: Options<PostUsersByIdCurrencyData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersByIdCurrencyResponses, PostUsersByIdCurrencyErrors, ThrowOnError>({
        url: '/users/{id}/currency',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Send email verification
 */
export const postUsersByIdVerifyEmail = <ThrowOnError extends boolean = false>(options: Options<PostUsersByIdVerifyEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUsersByIdVerifyEmailResponses, unknown, ThrowOnError>({
        url: '/users/{id}/verify-email',
        ...options
    });
};

/**
 * Get user info
 */
export const getUsersByIdInfo = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdInfoResponses, GetUsersByIdInfoErrors, ThrowOnError>({
        url: '/users/{id}/info',
        ...options
    });
};

/**
 * Get user VIP info
 */
export const getUsersByIdVipinfo = <ThrowOnError extends boolean = false>(options: Options<GetUsersByIdVipinfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetUsersByIdVipinfoResponses, unknown, ThrowOnError>({
        url: '/users/{id}/vipinfo',
        ...options
    });
};

export const getUserAmount = <ThrowOnError extends boolean = false>(options?: Options<GetUserAmountData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserAmountResponses, unknown, ThrowOnError>({
        url: '/user/amount',
        ...options
    });
};

export const postUserChange = <ThrowOnError extends boolean = false>(options: Options<PostUserChangeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserChangeResponses, unknown, ThrowOnError>({
        url: '/user/change',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postUserEmail = <ThrowOnError extends boolean = false>(options: Options<PostUserEmailData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserEmailResponses, unknown, ThrowOnError>({
        url: '/user/email',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postUserPassword = <ThrowOnError extends boolean = false>(options: Options<PostUserPasswordData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserPasswordResponses, unknown, ThrowOnError>({
        url: '/user/password',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const postUserSuspend = <ThrowOnError extends boolean = false>(options: Options<PostUserSuspendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostUserSuspendResponses, unknown, ThrowOnError>({
        url: '/user/suspend',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const getUserBalanceList = <ThrowOnError extends boolean = false>(options?: Options<GetUserBalanceListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetUserBalanceListResponses, unknown, ThrowOnError>({
        url: '/user/balance/list',
        ...options
    });
};

export const getGamesCategories = <ThrowOnError extends boolean = false>(options: Options<GetGamesCategoriesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetGamesCategoriesResponses, unknown, ThrowOnError>({
        url: '/games/categories',
        ...options
    });
};

export const getSearch = <ThrowOnError extends boolean = false>(options?: Options<GetSearchData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSearchResponses, unknown, ThrowOnError>({
        url: '/search',
        ...options
    });
};

export const getBigwin = <ThrowOnError extends boolean = false>(options?: Options<GetBigwinData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetBigwinResponses, unknown, ThrowOnError>({
        url: '/bigwin',
        ...options
    });
};

export const getVipinfo = <ThrowOnError extends boolean = false>(options?: Options<GetVipinfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVipinfoResponses, unknown, ThrowOnError>({
        url: '/vipinfo',
        ...options
    });
};

export const getViplevels = <ThrowOnError extends boolean = false>(options?: Options<GetViplevelsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetViplevelsResponses, unknown, ThrowOnError>({
        url: '/viplevels',
        ...options
    });
};

export const getViptasks = <ThrowOnError extends boolean = false>(options?: Options<GetViptasksData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetViptasksResponses, unknown, ThrowOnError>({
        url: '/viptasks',
        ...options
    });
};

export const postViplevelAward = <ThrowOnError extends boolean = false>(options?: Options<PostViplevelAwardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostViplevelAwardResponses, unknown, ThrowOnError>({
        url: '/viplevel/award',
        ...options
    });
};

export const postViprebateAward = <ThrowOnError extends boolean = false>(options?: Options<PostViprebateAwardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostViprebateAwardResponses, unknown, ThrowOnError>({
        url: '/viprebate/award',
        ...options
    });
};

export const getViprebatehistory = <ThrowOnError extends boolean = false>(options?: Options<GetViprebatehistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetViprebatehistoryResponses, unknown, ThrowOnError>({
        url: '/viprebatehistory',
        ...options
    });
};

export const getViplevelawardhistory = <ThrowOnError extends boolean = false>(options?: Options<GetViplevelawardhistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetViplevelawardhistoryResponses, unknown, ThrowOnError>({
        url: '/viplevelawardhistory',
        ...options
    });
};

export const getViptimeshistory = <ThrowOnError extends boolean = false>(options?: Options<GetViptimeshistoryData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetViptimeshistoryResponses, unknown, ThrowOnError>({
        url: '/viptimeshistory',
        ...options
    });
};

export const postVipsigninAward = <ThrowOnError extends boolean = false>(options?: Options<PostVipsigninAwardData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostVipsigninAwardResponses, unknown, ThrowOnError>({
        url: '/vipsignin/award',
        ...options
    });
};

export const getVipSigninawardList = <ThrowOnError extends boolean = false>(options?: Options<GetVipSigninawardListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVipSigninawardListResponses, unknown, ThrowOnError>({
        url: '/vip/signinaward/list',
        ...options
    });
};

export const postVipSigninawardReceive = <ThrowOnError extends boolean = false>(options?: Options<PostVipSigninawardReceiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostVipSigninawardReceiveResponses, unknown, ThrowOnError>({
        url: '/vip/signinaward/receive',
        ...options
    });
};

export const getViplevelupList = <ThrowOnError extends boolean = false>(options?: Options<GetViplevelupListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetViplevelupListResponses, unknown, ThrowOnError>({
        url: '/viplevelup/list',
        ...options
    });
};

export const postViplevelupReceive = <ThrowOnError extends boolean = false>(options?: Options<PostViplevelupReceiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostViplevelupReceiveResponses, unknown, ThrowOnError>({
        url: '/viplevelup/receive',
        ...options
    });
};

export const getVipCycleawardList = <ThrowOnError extends boolean = false>(options?: Options<GetVipCycleawardListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVipCycleawardListResponses, unknown, ThrowOnError>({
        url: '/vip/cycleaward/list',
        ...options
    });
};

export const postVipCycleawardReceive = <ThrowOnError extends boolean = false>(options?: Options<PostVipCycleawardReceiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostVipCycleawardReceiveResponses, unknown, ThrowOnError>({
        url: '/vip/cycleaward/receive',
        ...options
    });
};

export const getVipLevelawardList = <ThrowOnError extends boolean = false>(options?: Options<GetVipLevelawardListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVipLevelawardListResponses, unknown, ThrowOnError>({
        url: '/vip/levelaward/list',
        ...options
    });
};

export const postVipLevelawardReceive = <ThrowOnError extends boolean = false>(options?: Options<PostVipLevelawardReceiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostVipLevelawardReceiveResponses, unknown, ThrowOnError>({
        url: '/vip/levelaward/receive',
        ...options
    });
};

export const getVipBetawardList = <ThrowOnError extends boolean = false>(options?: Options<GetVipBetawardListData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetVipBetawardListResponses, unknown, ThrowOnError>({
        url: '/vip/betaward/list',
        ...options
    });
};

export const postVipBetawardReceive = <ThrowOnError extends boolean = false>(options?: Options<PostVipBetawardReceiveData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostVipBetawardReceiveResponses, unknown, ThrowOnError>({
        url: '/vip/betaward/receive',
        ...options
    });
};

export const getMonitoring = <ThrowOnError extends boolean = false>(options?: Options<GetMonitoringData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMonitoringResponses, unknown, ThrowOnError>({
        url: '/monitoring',
        ...options
    });
};

export const getMonitoringEvents = <ThrowOnError extends boolean = false>(options?: Options<GetMonitoringEventsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMonitoringEventsResponses, unknown, ThrowOnError>({
        url: '/monitoring/events',
        ...options
    });
};