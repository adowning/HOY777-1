// This file is auto-generated by @hey-api/openapi-ts

export type GetData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/';
};

export type GetResponses = {
    /**
     * Hoy API Index
     */
    200: {
        message: string;
    };
};

export type GetResponse = GetResponses[keyof GetResponses];

export type GetTestData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test';
};

export type GetTestResponses = {
    /**
     * Auth test page
     */
    200: unknown;
};

export type PostTestSignupData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/signup';
};

export type PostTestSignupResponses = {
    /**
     * Test signup endpoint
     */
    200: unknown;
};

export type GetTestLoginData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/test/login';
};

export type GetTestLoginResponses = {
    /**
     * Test login page
     */
    200: unknown;
};

export type PostTestLoginData = {
    body?: {
        username: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/test/login';
};

export type PostTestLoginResponses = {
    /**
     * Test login endpoint
     */
    200: unknown;
};

export type PostLoginData = {
    /**
     * The user to login
     */
    body: {
        username: string;
        password: string;
        uid?: string;
    };
    path?: never;
    query?: never;
    url: '/login';
};

export type PostLoginResponses = {
    /**
     * The login token
     */
    200: {
        token: string;
    };
};

export type PostLoginResponse = PostLoginResponses[keyof PostLoginResponses];

export type PostSignupData = {
    /**
     * The user to signup
     */
    body: {
        username: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/signup';
};

export type PostSignupResponses = {
    /**
     * The signup token
     */
    200: {
        token: string;
    };
};

export type PostSignupResponse = PostSignupResponses[keyof PostSignupResponses];

export type PostLogoutData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/logout';
};

export type PostLogoutResponses = {
    /**
     * Logout successful
     */
    200: {
        message: string;
    };
};

export type PostLogoutResponse = PostLogoutResponses[keyof PostLogoutResponses];

export type GetMeData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/me';
};

export type GetMeResponses = {
    /**
     * The current user session
     */
    200: {
        session: {
            id: string;
            endAt: string | null;
            duration: number;
            totalWagered: number;
            totalWon: number;
            rtp: string | null;
            status: 'ACTIVE' | 'COMPLETED' | 'EXPIRED';
            spinIds: Array<string>;
            currentBalance: number;
            totalXpGained: number;
            userId: string;
            gameId: string | null;
            ipAddress: string | null;
            userAgent: string | null;
            deviceId: string | null;
            createdAt: string;
            updatedAt: string | null;
            lastSeen: string;
        } | null;
        user: {
            id: string;
            uid: string | null;
            username: string;
            email: string | null;
            passwordHash: string | null;
            phone: string | null;
            avatar: string | null;
            balance: number | null;
            withdrawable: number | null;
            vipLevel: number | null;
            inviteUrl: string | null;
            inviteCode: string | null;
            firstName: string | null;
            lastName: string | null;
            idNumber: string | null;
            emailConfirmed: boolean | null;
            phoneConfirmed: boolean | null;
            dateOfBirth: string | null;
            county: string | null;
            role: 'admin' | 'user';
            state: string | null;
            city: string | null;
            address: string | null;
            postalCode: string | null;
            language: string | null;
            locale: string | null;
            initialProfileComplete: boolean | null;
            isSuspended: number | null;
            sysCommunications: boolean | null;
            lockedPersonalInfoFields: string | number | boolean | unknown | {
                [key: string]: unknown;
            } | Array<unknown>;
            lastSeenAt: string | null;
            lastStartedAt: string | null;
            lastSignInAt: string | null;
            createdAt: string | null;
            updatedAt: string | null;
        } | null;
        wallet: {
            id: string;
            balance: number;
            paymentMethod: 'INSTORE_CASH' | 'CREDIT_CARD' | 'BANK_TRANSFER' | 'CRYPTO';
            currency: string;
            isActive: boolean;
            isDefault: boolean;
            address: string | null;
            cashtag: string | null;
            userId: string;
            operatorId: string;
            lastUsedAt: string | null;
            createdAt: string;
            updatedAt: string;
        } | null;
        operator: {
            id: string;
            name: string;
            operatorSecret: string;
            operatorAccess: string;
            callbackUrl: string;
            isActive: boolean;
            allowedIps: Array<string>;
            description: string | null;
            balance: number;
            netRevenue: number;
            acceptedPayments: Array<'INSTORE_CASH' | 'CREDIT_CARD' | 'BANK_TRANSFER' | 'CRYPTO'>;
            ownerId: string | null;
            lastUsedAt: string | null;
            createdAt: string;
            updatedAt: string;
        } | null;
        vipInfo: {
            userId: string;
            level: number | null;
            depositExp: number | null;
            betExp: number | null;
            rankBetExp: number | null;
            rankDepositExp: number | null;
            freeSpinTimes: number | null;
            weekGift: number | null;
            monthGift: number | null;
            upgradeGift: number | null;
            nowCashBack: number | null;
            yesterdayCashBack: number | null;
            historyCashBack: number | null;
        } | null;
    };
};

export type GetMeResponse = GetMeResponses[keyof GetMeResponses];

export type GetUsersData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/users';
};

export type GetUsersResponses = {
    /**
     * The list of users
     */
    200: Array<{
        id: string;
        uid: string | null;
        username: string;
        email: string | null;
        passwordHash: string | null;
        phone: string | null;
        avatar: string | null;
        balance: number | null;
        withdrawable: number | null;
        vipLevel: number | null;
        inviteUrl: string | null;
        inviteCode: string | null;
        firstName: string | null;
        lastName: string | null;
        idNumber: string | null;
        emailConfirmed: boolean | null;
        phoneConfirmed: boolean | null;
        dateOfBirth: string | null;
        county: string | null;
        role: 'admin' | 'user';
        state: string | null;
        city: string | null;
        address: string | null;
        postalCode: string | null;
        language: string | null;
        locale: string | null;
        initialProfileComplete: boolean | null;
        isSuspended: number | null;
        sysCommunications: boolean | null;
        lockedPersonalInfoFields: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt: string | null;
        lastStartedAt: string | null;
        lastSignInAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
    }>;
};

export type GetUsersResponse = GetUsersResponses[keyof GetUsersResponses];

export type PostUsersData = {
    /**
     * The user to create
     */
    body: {
        uid?: string | null;
        username: string;
        email?: string | null;
        passwordHash?: string | null;
        phone?: string | null;
        avatar?: string | null;
        balance?: number | null;
        withdrawable?: number | null;
        vipLevel?: number | null;
        inviteUrl?: string | null;
        inviteCode?: string | null;
        firstName?: string | null;
        lastName?: string | null;
        idNumber?: string | null;
        emailConfirmed?: boolean | null;
        phoneConfirmed?: boolean | null;
        dateOfBirth?: string | null;
        county?: string | null;
        role?: 'admin' | 'user';
        state?: string | null;
        city?: string | null;
        address?: string | null;
        postalCode?: string | null;
        language?: string | null;
        locale?: string | null;
        initialProfileComplete?: boolean | null;
        isSuspended?: number | null;
        sysCommunications?: boolean | null;
        lockedPersonalInfoFields?: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt?: string | null;
        lastStartedAt?: string | null;
        lastSignInAt?: string | null;
    };
    path?: never;
    query?: never;
    url: '/users';
};

export type PostUsersErrors = {
    /**
     * The validation error(s)
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type PostUsersError = PostUsersErrors[keyof PostUsersErrors];

export type PostUsersResponses = {
    /**
     * The created user
     */
    200: {
        id: string;
        uid: string | null;
        username: string;
        email: string | null;
        passwordHash: string | null;
        phone: string | null;
        avatar: string | null;
        balance: number | null;
        withdrawable: number | null;
        vipLevel: number | null;
        inviteUrl: string | null;
        inviteCode: string | null;
        firstName: string | null;
        lastName: string | null;
        idNumber: string | null;
        emailConfirmed: boolean | null;
        phoneConfirmed: boolean | null;
        dateOfBirth: string | null;
        county: string | null;
        role: 'admin' | 'user';
        state: string | null;
        city: string | null;
        address: string | null;
        postalCode: string | null;
        language: string | null;
        locale: string | null;
        initialProfileComplete: boolean | null;
        isSuspended: number | null;
        sysCommunications: boolean | null;
        lockedPersonalInfoFields: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt: string | null;
        lastStartedAt: string | null;
        lastSignInAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
    };
};

export type PostUsersResponse = PostUsersResponses[keyof PostUsersResponses];

export type PostEnterGameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/enter/game';
};

export type PostEnterGameResponses = {
    /**
     * Enter game
     */
    200: unknown;
};

export type PostGamesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/games';
};

export type PostGamesResponses = {
    /**
     * User game
     */
    200: unknown;
};

export type PostSetupGameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/setup/game';
};

export type PostSetupGameResponses = {
    /**
     * Favorite game
     */
    200: unknown;
};

export type GetGamehistoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/gamehistory';
};

export type GetGamehistoryResponses = {
    /**
     * Game history
     */
    200: unknown;
};

export type GetSpinpageData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/spinpage';
};

export type GetSpinpageResponses = {
    /**
     * Spin page
     */
    200: unknown;
};

export type PostSpinData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/spin';
};

export type PostSpinResponses = {
    /**
     * Spin
     */
    200: unknown;
};

export type GetFavoriteGameData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/favorite/game';
};

export type GetFavoriteGameResponses = {
    /**
     * Favorite game list
     */
    200: unknown;
};

export type DeleteUsersByIdData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}';
};

export type DeleteUsersByIdErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Invalid id error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type DeleteUsersByIdError = DeleteUsersByIdErrors[keyof DeleteUsersByIdErrors];

export type DeleteUsersByIdResponses = {
    /**
     * User deleted
     */
    204: void;
};

export type DeleteUsersByIdResponse = DeleteUsersByIdResponses[keyof DeleteUsersByIdResponses];

export type GetUsersByIdData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}';
};

export type GetUsersByIdErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * Invalid id error
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type GetUsersByIdError = GetUsersByIdErrors[keyof GetUsersByIdErrors];

export type GetUsersByIdResponses = {
    /**
     * The requested user
     */
    200: {
        id: string;
        uid: string | null;
        username: string;
        email: string | null;
        passwordHash: string | null;
        phone: string | null;
        avatar: string | null;
        balance: number | null;
        withdrawable: number | null;
        vipLevel: number | null;
        inviteUrl: string | null;
        inviteCode: string | null;
        firstName: string | null;
        lastName: string | null;
        idNumber: string | null;
        emailConfirmed: boolean | null;
        phoneConfirmed: boolean | null;
        dateOfBirth: string | null;
        county: string | null;
        role: 'admin' | 'user';
        state: string | null;
        city: string | null;
        address: string | null;
        postalCode: string | null;
        language: string | null;
        locale: string | null;
        initialProfileComplete: boolean | null;
        isSuspended: number | null;
        sysCommunications: boolean | null;
        lockedPersonalInfoFields: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt: string | null;
        lastStartedAt: string | null;
        lastSignInAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
    };
};

export type GetUsersByIdResponse = GetUsersByIdResponses[keyof GetUsersByIdResponses];

export type PatchUsersByIdData = {
    /**
     * The user updates
     */
    body: {
        uid?: string | null;
        username?: string;
        email?: string | null;
        passwordHash?: string | null;
        phone?: string | null;
        avatar?: string | null;
        balance?: number | null;
        withdrawable?: number | null;
        vipLevel?: number | null;
        inviteUrl?: string | null;
        inviteCode?: string | null;
        firstName?: string | null;
        lastName?: string | null;
        idNumber?: string | null;
        emailConfirmed?: boolean | null;
        phoneConfirmed?: boolean | null;
        dateOfBirth?: string | null;
        county?: string | null;
        role?: 'admin' | 'user';
        state?: string | null;
        city?: string | null;
        address?: string | null;
        postalCode?: string | null;
        language?: string | null;
        locale?: string | null;
        initialProfileComplete?: boolean | null;
        isSuspended?: number | null;
        sysCommunications?: boolean | null;
        lockedPersonalInfoFields?: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt?: string | null;
        lastStartedAt?: string | null;
        lastSignInAt?: string | null;
    };
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}';
};

export type PatchUsersByIdErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
    /**
     * The validation error(s)
     */
    422: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    } | {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type PatchUsersByIdError = PatchUsersByIdErrors[keyof PatchUsersByIdErrors];

export type PatchUsersByIdResponses = {
    /**
     * The updated user
     */
    200: {
        id: string;
        uid: string | null;
        username: string;
        email: string | null;
        passwordHash: string | null;
        phone: string | null;
        avatar: string | null;
        balance: number | null;
        withdrawable: number | null;
        vipLevel: number | null;
        inviteUrl: string | null;
        inviteCode: string | null;
        firstName: string | null;
        lastName: string | null;
        idNumber: string | null;
        emailConfirmed: boolean | null;
        phoneConfirmed: boolean | null;
        dateOfBirth: string | null;
        county: string | null;
        role: 'admin' | 'user';
        state: string | null;
        city: string | null;
        address: string | null;
        postalCode: string | null;
        language: string | null;
        locale: string | null;
        initialProfileComplete: boolean | null;
        isSuspended: number | null;
        sysCommunications: boolean | null;
        lockedPersonalInfoFields: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt: string | null;
        lastStartedAt: string | null;
        lastSignInAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
    };
};

export type PatchUsersByIdResponse = PatchUsersByIdResponses[keyof PatchUsersByIdResponses];

export type GetUsersByIdCheckData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}/check';
};

export type GetUsersByIdCheckErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
};

export type GetUsersByIdCheckError = GetUsersByIdCheckErrors[keyof GetUsersByIdCheckErrors];

export type GetUsersByIdCheckResponses = {
    /**
     * User status
     */
    200: {
        userCheck: boolean;
    };
};

export type GetUsersByIdCheckResponse = GetUsersByIdCheckResponses[keyof GetUsersByIdCheckResponses];

export type GetUsersByIdBalanceData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}/balance';
};

export type GetUsersByIdBalanceResponses = {
    /**
     * User balance
     */
    200: Array<{
        id: string;
        userId: string | null;
        amount: number | null;
        currency: string | null;
        availableBalance: number | null;
        real: string | null;
        bonus: string | null;
    }>;
};

export type GetUsersByIdBalanceResponse = GetUsersByIdBalanceResponses[keyof GetUsersByIdBalanceResponses];

export type PostUsersByIdCurrencyData = {
    /**
     * The currency to set
     */
    body: {
        currency: string;
    };
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}/currency';
};

export type PostUsersByIdCurrencyErrors = {
    /**
     * Invalid currency
     */
    400: {
        success: boolean;
        error: {
            issues: Array<{
                code: string;
                path: Array<string | number>;
                message?: string;
            }>;
            name: string;
        };
    };
};

export type PostUsersByIdCurrencyError = PostUsersByIdCurrencyErrors[keyof PostUsersByIdCurrencyErrors];

export type PostUsersByIdCurrencyResponses = {
    /**
     * Currency set
     */
    200: {
        id: string;
        name: string | null;
        code: string | null;
    };
};

export type PostUsersByIdCurrencyResponse = PostUsersByIdCurrencyResponses[keyof PostUsersByIdCurrencyResponses];

export type PostUsersByIdVerifyEmailData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}/verify-email';
};

export type PostUsersByIdVerifyEmailResponses = {
    /**
     * Verification sent
     */
    200: {
        status: string;
        time: number;
    };
};

export type PostUsersByIdVerifyEmailResponse = PostUsersByIdVerifyEmailResponses[keyof PostUsersByIdVerifyEmailResponses];

export type GetUsersByIdInfoData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}/info';
};

export type GetUsersByIdInfoErrors = {
    /**
     * User not found
     */
    404: {
        message: string;
    };
};

export type GetUsersByIdInfoError = GetUsersByIdInfoErrors[keyof GetUsersByIdInfoErrors];

export type GetUsersByIdInfoResponses = {
    /**
     * User info
     */
    200: {
        id: string;
        uid: string | null;
        username: string;
        email: string | null;
        passwordHash: string | null;
        phone: string | null;
        avatar: string | null;
        balance: number | null;
        withdrawable: number | null;
        vipLevel: number | null;
        inviteUrl: string | null;
        inviteCode: string | null;
        firstName: string | null;
        lastName: string | null;
        idNumber: string | null;
        emailConfirmed: boolean | null;
        phoneConfirmed: boolean | null;
        dateOfBirth: string | null;
        county: string | null;
        role: 'admin' | 'user';
        state: string | null;
        city: string | null;
        address: string | null;
        postalCode: string | null;
        language: string | null;
        locale: string | null;
        initialProfileComplete: boolean | null;
        isSuspended: number | null;
        sysCommunications: boolean | null;
        lockedPersonalInfoFields: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt: string | null;
        lastStartedAt: string | null;
        lastSignInAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
    };
};

export type GetUsersByIdInfoResponse = GetUsersByIdInfoResponses[keyof GetUsersByIdInfoResponses];

export type GetUsersByIdVipinfoData = {
    body?: never;
    path: {
        id: number | null;
    };
    query?: never;
    url: '/users/{id}/vipinfo';
};

export type GetUsersByIdVipinfoResponses = {
    /**
     * VIP info
     */
    200: {
        vipLevel: number | null;
    };
};

export type GetUsersByIdVipinfoResponse = GetUsersByIdVipinfoResponses[keyof GetUsersByIdVipinfoResponses];

export type GetUserAmountData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/amount';
};

export type GetUserAmountResponses = {
    200: {
        amount: number;
        currency: {
            fiat: boolean;
            name: string;
            symbol: string;
            type: string;
        };
        withdraw: number;
        rate: number;
    };
};

export type GetUserAmountResponse = GetUserAmountResponses[keyof GetUserAmountResponses];

export type PostUserChangeData = {
    /**
     * The user info to update
     */
    body: {
        uid?: string | null;
        username?: string;
        email?: string | null;
        passwordHash?: string | null;
        phone?: string | null;
        avatar?: string | null;
        balance?: number | null;
        withdrawable?: number | null;
        vipLevel?: number | null;
        inviteUrl?: string | null;
        inviteCode?: string | null;
        firstName?: string | null;
        lastName?: string | null;
        idNumber?: string | null;
        emailConfirmed?: boolean | null;
        phoneConfirmed?: boolean | null;
        dateOfBirth?: string | null;
        county?: string | null;
        role?: 'admin' | 'user';
        state?: string | null;
        city?: string | null;
        address?: string | null;
        postalCode?: string | null;
        language?: string | null;
        locale?: string | null;
        initialProfileComplete?: boolean | null;
        isSuspended?: number | null;
        sysCommunications?: boolean | null;
        lockedPersonalInfoFields?: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt?: string | null;
        lastStartedAt?: string | null;
        lastSignInAt?: string | null;
    };
    path?: never;
    query?: never;
    url: '/user/change';
};

export type PostUserChangeResponses = {
    /**
     * The updated user
     */
    200: {
        id: string;
        uid: string | null;
        username: string;
        email: string | null;
        passwordHash: string | null;
        phone: string | null;
        avatar: string | null;
        balance: number | null;
        withdrawable: number | null;
        vipLevel: number | null;
        inviteUrl: string | null;
        inviteCode: string | null;
        firstName: string | null;
        lastName: string | null;
        idNumber: string | null;
        emailConfirmed: boolean | null;
        phoneConfirmed: boolean | null;
        dateOfBirth: string | null;
        county: string | null;
        role: 'admin' | 'user';
        state: string | null;
        city: string | null;
        address: string | null;
        postalCode: string | null;
        language: string | null;
        locale: string | null;
        initialProfileComplete: boolean | null;
        isSuspended: number | null;
        sysCommunications: boolean | null;
        lockedPersonalInfoFields: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt: string | null;
        lastStartedAt: string | null;
        lastSignInAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
    };
};

export type PostUserChangeResponse = PostUserChangeResponses[keyof PostUserChangeResponses];

export type PostUserEmailData = {
    /**
     * The email to update
     */
    body: {
        email: string;
        password: string;
    };
    path?: never;
    query?: never;
    url: '/user/email';
};

export type PostUserEmailResponses = {
    /**
     * The updated user
     */
    200: {
        id: string;
        uid: string | null;
        username: string;
        email: string | null;
        passwordHash: string | null;
        phone: string | null;
        avatar: string | null;
        balance: number | null;
        withdrawable: number | null;
        vipLevel: number | null;
        inviteUrl: string | null;
        inviteCode: string | null;
        firstName: string | null;
        lastName: string | null;
        idNumber: string | null;
        emailConfirmed: boolean | null;
        phoneConfirmed: boolean | null;
        dateOfBirth: string | null;
        county: string | null;
        role: 'admin' | 'user';
        state: string | null;
        city: string | null;
        address: string | null;
        postalCode: string | null;
        language: string | null;
        locale: string | null;
        initialProfileComplete: boolean | null;
        isSuspended: number | null;
        sysCommunications: boolean | null;
        lockedPersonalInfoFields: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        lastSeenAt: string | null;
        lastStartedAt: string | null;
        lastSignInAt: string | null;
        createdAt: string | null;
        updatedAt: string | null;
    };
};

export type PostUserEmailResponse = PostUserEmailResponses[keyof PostUserEmailResponses];

export type PostUserPasswordData = {
    /**
     * The password to update
     */
    body: {
        now_password: string;
        new_password: string;
    };
    path?: never;
    query?: never;
    url: '/user/password';
};

export type PostUserPasswordResponses = {
    /**
     * Password updated
     */
    200: {
        message: string;
    };
};

export type PostUserPasswordResponse = PostUserPasswordResponses[keyof PostUserPasswordResponses];

export type PostUserSuspendData = {
    /**
     * The suspension time
     */
    body: {
        time: number;
    };
    path?: never;
    query?: never;
    url: '/user/suspend';
};

export type PostUserSuspendResponses = {
    /**
     * User suspended
     */
    200: {
        message: string;
    };
};

export type PostUserSuspendResponse = PostUserSuspendResponses[keyof PostUserSuspendResponses];

export type GetUserBalanceListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/user/balance/list';
};

export type GetUserBalanceListResponses = {
    /**
     * The list of balances
     */
    200: Array<{
        id: string;
        userId: string | null;
        amount: number | null;
        currency: string | null;
        availableBalance: number | null;
        real: string | null;
        bonus: string | null;
    }>;
};

export type GetUserBalanceListResponse = GetUserBalanceListResponses[keyof GetUserBalanceListResponses];

export type GetGamesCategoriesData = {
    body?: never;
    path?: never;
    query: {
        id: string;
        name?: string | null;
        title?: string | null;
        category?: string | null;
        slug?: string | null;
        type?: string | null;
        icon?: string | null;
        image?: string | null;
        pictures?: string | null;
        gameCount?: number | null;
        pageNo?: number | null;
    };
    url: '/games/categories';
};

export type GetGamesCategoriesResponses = {
    200: Array<{
        id: string;
        name: string | null;
        title: string | null;
        category: string | null;
        slug: string | null;
        type: string | null;
        icon: string | null;
        image: string | null;
        pictures: string | null;
        gameCount: number | null;
        pageNo: number | null;
    }>;
};

export type GetGamesCategoriesResponse = GetGamesCategoriesResponses[keyof GetGamesCategoriesResponses];

export type GetSearchData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/search';
};

export type GetSearchResponses = {
    200: Array<{
        id: string;
        name: string | null;
        provider: string | null;
        categoryId: string | null;
    }>;
};

export type GetSearchResponse = GetSearchResponses[keyof GetSearchResponses];

export type GetBigwinData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/bigwin';
};

export type GetBigwinResponses = {
    200: {
        high_rollers: Array<{
            id: string;
            gameId: string | null;
            gameName: string | null;
            gameIcon: string | null;
            userName: string | null;
            userVipGroup: number | null;
            userVipLevel: number | null;
            betAmount: string | null;
            multiplier: string | null;
            winAmount: string | null;
            time: number | null;
        }>;
        lucky_bets: Array<{
            id: string;
            gameId: string | null;
            gameName: string | null;
            gameIcon: string | null;
            userName: string | null;
            userVipGroup: number | null;
            userVipLevel: number | null;
            betAmount: string | null;
            multiplier: string | null;
            winAmount: string | null;
            time: number | null;
        }>;
    };
};

export type GetBigwinResponse = GetBigwinResponses[keyof GetBigwinResponses];

export type GetVipinfoData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vipinfo';
};

export type GetVipinfoResponses = {
    /**
     * VIP info
     */
    200: unknown;
};

export type GetViplevelsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viplevels';
};

export type GetViplevelsResponses = {
    200: Array<{
        id: string;
        level: number | null;
        name: string | null;
        rankId: number | null;
        protectionConditions: number | null;
        depositExp: number | null;
        betExp: number | null;
        freeSpinsTimes: number | null;
        uprankAward: number | null;
        weekAward: number | null;
        withdrawalsAmount: number | null;
        withdrawalTimes: number | null;
        monthWithdrawalsAmount: number | null;
        monthWithdrawalsTimes: number | null;
        monthAward: number | null;
        freeWithdrawals: number | null;
        freeWithdrawalsTimes: number | null;
        withdrawalFee: number | null;
        betAwardRate: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        signinAward: string | number | boolean | unknown | {
            [key: string]: unknown;
        } | Array<unknown>;
        tasksMax: number | null;
        depositRate: number | null;
        betRate: number | null;
        availableDailyBonusTime: string | null;
        collectableWeekBonusDay: string | null;
        collectableMonthBonusDay: string | null;
    }>;
};

export type GetViplevelsResponse = GetViplevelsResponses[keyof GetViplevelsResponses];

export type GetViptasksData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viptasks';
};

export type GetViptasksResponses = {
    /**
     * VIP tasks
     */
    200: unknown;
};

export type PostViplevelAwardData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viplevel/award';
};

export type PostViplevelAwardResponses = {
    /**
     * VIP level award
     */
    200: unknown;
};

export type PostViprebateAwardData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viprebate/award';
};

export type PostViprebateAwardResponses = {
    /**
     * VIP rebate award
     */
    200: unknown;
};

export type GetViprebatehistoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viprebatehistory';
};

export type GetViprebatehistoryResponses = {
    /**
     * VIP rebate history
     */
    200: unknown;
};

export type GetViplevelawardhistoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viplevelawardhistory';
};

export type GetViplevelawardhistoryResponses = {
    /**
     * VIP level award history
     */
    200: unknown;
};

export type GetViptimeshistoryData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viptimeshistory';
};

export type GetViptimeshistoryResponses = {
    /**
     * VIP times history
     */
    200: unknown;
};

export type PostVipsigninAwardData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vipsignin/award';
};

export type PostVipsigninAwardResponses = {
    /**
     * VIP sign-in rewards
     */
    200: unknown;
};

export type GetVipSigninawardListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vip/signinaward/list';
};

export type GetVipSigninawardListResponses = {
    /**
     * VIP sign-in award list
     */
    200: unknown;
};

export type PostVipSigninawardReceiveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vip/signinaward/receive';
};

export type PostVipSigninawardReceiveResponses = {
    /**
     * Receive VIP sign-in award
     */
    200: unknown;
};

export type GetViplevelupListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viplevelup/list';
};

export type GetViplevelupListResponses = {
    /**
     * VIP level up list
     */
    200: unknown;
};

export type PostViplevelupReceiveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/viplevelup/receive';
};

export type PostViplevelupReceiveResponses = {
    /**
     * Receive VIP level up award
     */
    200: unknown;
};

export type GetVipCycleawardListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vip/cycleaward/list';
};

export type GetVipCycleawardListResponses = {
    /**
     * VIP cycle award list
     */
    200: unknown;
};

export type PostVipCycleawardReceiveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vip/cycleaward/receive';
};

export type PostVipCycleawardReceiveResponses = {
    /**
     * Receive VIP cycle award
     */
    200: unknown;
};

export type GetVipLevelawardListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vip/levelaward/list';
};

export type GetVipLevelawardListResponses = {
    /**
     * VIP level award list
     */
    200: unknown;
};

export type PostVipLevelawardReceiveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vip/levelaward/receive';
};

export type PostVipLevelawardReceiveResponses = {
    /**
     * Receive VIP level award
     */
    200: unknown;
};

export type GetVipBetawardListData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vip/betaward/list';
};

export type GetVipBetawardListResponses = {
    /**
     * VIP bet award list
     */
    200: unknown;
};

export type PostVipBetawardReceiveData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/vip/betaward/receive';
};

export type PostVipBetawardReceiveResponses = {
    /**
     * Receive VIP bet award
     */
    200: unknown;
};

export type GetMonitoringData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/monitoring';
};

export type GetMonitoringResponses = {
    /**
     * Live server monitoring page
     */
    200: unknown;
};

export type GetMonitoringEventsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/monitoring/events';
};

export type GetMonitoringEventsResponses = {
    /**
     * SSE stream for active users
     */
    200: unknown;
};

export type ClientOptions = {
    baseUrl: 'http://localhost:9999' | (string & {});
};