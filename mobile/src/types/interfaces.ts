// This file was auto-generated by prisma-generator-typescript-interfaces

export type TournamentStatus = "PENDING" | "ACTIVE" | "COMPLETED" | "CANCELLED";

export type UserRole = "USER" | "ADMIN" | "MODERATOR" | "SUPPORT" | "BOT" | "SYSTEM";

export type SessionStatus = "ACTIVE" | "COMPLETED" | "ABANDONED" | "TIMEOUT";

export type JackpotType = "MINOR" | "MAJOR" | "GRAND";

export type PaymentMethod = "INSTORE_CASH" | "INSTORE_CARD" | "CASH_APP";

export type TransactionType = "DEPOSIT" | "WITHDRAWAL" | "BET" | "WIN" | "TRANSFER_SENT" | "TRANSFER_RECEIVED" | "SYSTEM_ADJUSTMENT_CREDIT" | "SYSTEM_ADJUSTMENT_DEBIT" | "TOURNAMENT_BUYIN" | "TOURNAMENT_PRIZE" | "AFFILIATE_COMMISSION" | "REFUND" | "FEE" | "BONUS_AWARD" | "BET_PLACE" | "BET_WIN" | "BET_LOSE" | "BET_REFUND" | "BONUS_WAGER" | "BONUS_CONVERT" | "BONUS_EXPIRED" | "XP_AWARD" | "ADJUSTMENT_ADD" | "ADJUSTMENT_SUB" | "INTERNAL_TRANSFER" | "PRODUCT_PURCHASE" | "REBATE_PAYOUT" | "JACKPOT_WIN" | "JACKPOT_CONTRIBUTION";

export type TransactionStatus = "PENDING" | "PROCESSING" | "COMPLETED" | "FAILED" | "CANCELLED" | "REFUNDED" | "EXPIRED" | "REJECTED" | "REQUIRES_ACTION" | "ON_HOLD";

export type Role = "USER" | "ADMIN" | "VIP" | "MODERATOR" | "SYSTEM" | "OWNER" | "MEMBER" | "OPERATOR" | "SUPPORT_AGENT";

export type GameCategory = "SLOTS" | "TABLE" | "LIVE" | "POKER" | "LOTTERY" | "VIRTUAL" | "OTHER";

export type GameProviderName = "PRAGMATICPLAY" | "EVOPLAY" | "NETENT" | "PLAYNGO" | "RELAXGAMING" | "HACKSAW" | "BGAMING" | "SPRIBE" | "INTERNAL" | "REDTIGER" | "NETGAME" | "BIGFISHGAMES" | "CQNINE" | "NOLIMIT" | "KICKASS";

export type Permission = "read" | "write" | "upload" | "manage_users" | "manage_settings" | "launch_game";
import type { GetMeResponses } from '@/plugins/api/gen';

export type User = GetMeResponses[200]['user'];
export type Session = GetMeResponses[200]['session'];
export type Wallet = GetMeResponses[200]['wallet'];
export type VipInfo = GetMeResponses[200]['vipInfo'];
export type Operator = GetMeResponses[200]['operator'];

export interface Game {
  id: string;
  name: string;
  title: string;
  goldsvetData: JsonValue | null;
  description: string | null;
  category: GameCategory;
  tags: string[];
  thumbnailUrl: string | null;
  bannerUrl: string | null;
  providerName: GameProviderName;
  providerId: string | null;
  totalWagered: number;
  totalWon: number;
  targetRtp: number | null;
  isFeatured: boolean;
  isActive: boolean;
  isChecked: boolean;
  operatorId: string | null;
  operator?: Operator | null;
  tournamentDirectives: JsonValue | null;
  sessions?: Session[];
  Tournament?: Tournament[];
  createdAt: Date;
  updatedAt: Date;
}

export interface GameSpin {
  id: string;
  playerName: string | null;
  gameName: string | null;
  spinData: JsonValue | null;
  grossWinAmount: number;
  wagerAmount: number;
  spinNumber: number;
  playerAvatar: string | null;
  currencyId: string | null;
  sessionId: string;
  userId: string | null;
  createdAt: Date;
  updatedAt: Date;
  occurredAt: Date;
  jackpotContributions?: JackpotContribution[];
  jackpotWins?: JackpotWin | null;
  sessionDataId: string | null;
}


export interface InActiveWallet {
  id: string;
  balance: number;
  paymentMethod: PaymentMethod;
  currency: string;
  isActive: boolean;
  isDefault: boolean;
  address: string | null;
  cashtag: string | null;
  userId: string | null;
  operatorId: string;
  lastUsedAt: Date | null;
  createdAt: Date;
  updatedAt: Date;
}

export interface Transaction {
  id: string;
  processedAt: Date | null;
  walletId: string | null;
  type: TransactionType;
  status: TransactionStatus;
  amount: number;
  netAmount: number | null;
  feeAmount: number | null;
  productId: string | null;
  paymentMethod: PaymentMethod | null;
  balanceBefore: number | null;
  balanceAfter: number | null;
  bonusBalanceBefore: number | null;
  bonusBalanceAfter: number | null;
  bonusAmount: number | null;
  wageringRequirement: number | null;
  wageringProgress: number | null;
  description: string | null;
  provider: string | null;
  providerTxId: string | null;
  relatedGameId: string | null;
  relatedRoundId: string | null;
  createdAt: Date;
  updatedAt: Date;
  operatorId: string | null;
  jackpotWins?: JackpotWin[];
  product?: Product | null;
  userId: string | null;
  wallet?: Wallet | null;
}

export interface Product {
  id: string;
  title: string;
  productType: string;
  bonusTotalInCents: number;
  isActive: boolean | null;
  priceInCents: number;
  amountToReceiveInCents: number;
  bestValue: number;
  discountInCents: number;
  bonusSpins: number;
  isPromo: boolean | null;
  totalDiscountInCents: number;
  operatorId: string | null;
  createdAt: Date;
  updatedAt: Date;
  operator?: Operator | null;
  transactions?: Transaction[];
}

export interface VipRank {
  id: number;
  name: string;
  minXp: number;
  dailyBonusCoinPct: number;
  hourlyBonusCoinPct: number;
  purchaseBonusCoinPct: number;
  levelUpBonusCoinPct: number;
  hasConcierge: boolean;
  hasVipLoungeAccess: boolean;
  isInvitationOnly: boolean;
}

export interface VipLevel {
  level: number;
  xpForNext: number;
}


export interface BlackjackGame {
  id: string;
  deck: JsonValue;
  dealerCards: JsonValue;
  fair: JsonValue;
  table: number;
  type: string;
  state: string;
  updatedAt: Date;
  createdAt: Date;
  bets?: BlackjackBet[];
}

export interface BlackjackBet {
  id: string;
  amount: JsonValue;
  payout: number | null;
  multiplier: number | null;
  cards: JsonValue;
  cardsLeft: JsonValue | null;
  cardsRight: JsonValue | null;
  actions: string[];
  seat: number;
  gameId: string;
  userId: string;
  game?: BlackjackGame;
  user?: User;
  updatedAt: Date;
  createdAt: Date;
}

export interface VipLevelUpHistory {
  id: string;
  previousLevel: number;
  newLevel: number;
  timestamp: Date;
  vipInfoId: string;
  vipInfo?: VipInfo;
}

export interface Jackpot {
  id: string;
  type: JackpotType;
  currentAmountCoins: number;
  seedAmountCoins: number;
  minimumBetCoins: number;
  contributionRateBasisPoints: number;
  probabilityPerMillion: number;
  minimumTimeBetweenWinsMinutes: number;
  lastWonAt: Date | null;
  lastWonBy: string | null;
  isActive: boolean;
  createdAt: Date;
  updatedAt: Date;
  contributions?: JackpotContribution[];
  wins?: JackpotWin[];
  lastWinner?: User | null;
}

export interface JackpotContribution {
  id: string;
  jackpotId: string;
  userId: string | null;
  gameSpinId: string;
  contributionAmountCoins: number;
  createdAt: Date;
  gameSpin?: GameSpin;
  jackpot?: Jackpot;
}

export interface JackpotWin {
  id: string;
  jackpotId: string;
  winnerId: string;
  winAmountCoins: number;
  gameSpinId: string;
  transactionId: string | null;
  createdAt: Date;
  gameSpin?: GameSpin;
  jackpot?: Jackpot;
  transaction?: Transaction | null;
  winner?: User;
  sessionDataId: string | null;
}

export interface Tournament {
  id: string;
  name: string;
  description: string | null;
  startTime: Date;
  endTime: Date | null;
  targetScore: number | null;
  status: TournamentStatus;
  createdAt: Date;
  updatedAt: Date;
  createdByid: string | null;
  userId: string | null;
  participants?: TournamentParticipant[];
  rewards?: TournamentReward[];
  tournamentGames?: Game[];
}

export interface TournamentParticipant {
  id: string;
  tournamentId: string;
  userId: string;
  score: number;
  rank: number | null;
  joinedAt: Date;
  gamePlays?: TournamentGamePlay[];
  tournament?: Tournament;
  user?: User;
}

export interface TournamentGamePlay {
  id: string;
  tournamentParticipantId: string;
  gameId: string;
  pointsEarned: number;
  playedAt: Date;
  gameSessionId: string | null;
  tournamentParticipant?: TournamentParticipant;
}

export interface TournamentReward {
  id: string;
  tournamentId: string;
  rank: number;
  description: string;
  isClaimed: boolean;
  winnerId: string | null;
  tournament?: Tournament;
}

export interface CasinoCharacter {
  id: string;
  balance: number;
  characterID: string;
  chips: number;
  gold: number;
  handle: string;
  xpLevel: number;
  minigameTickets: number;
  privateID: string | null;
  sessionID: string | null;
  totalCash: number;
  vipPoints: number;
  vipTier: number;
  vipProgress: number;
  vipPointsToNextTier: number;
  purchaseMultiplier: number;
  remoteLoggingEnabled: boolean;
  fetchTime: bigint;
  lastRateTime: bigint;
  friendRequestSent: boolean;
  online: boolean;
  createdOn: bigint;
  b2c: number;
  createdAt: Date;
  updatedAt: Date;
}

type Decimal = { valueOf(): string };

type JsonValue = string | number | boolean | { [key in string]?: JsonValue } | Array<JsonValue> | null;
